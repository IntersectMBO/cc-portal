services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    restart: unless-stopped
    ports:
      - "1337:1337"
    networks:
      - cc
    depends_on:
      - psql
      - cache
      - s3
      - ipfs

  worker:
    build:
      context: ./worker-service
      dockerfile: Dockerfile
    container_name: worker
    restart: unless-stopped
    networks:
      - cc

  ipfs:
    build:
      context: ./ipfs-service
      dockerfile: Dockerfile
    container_name: ipfs-service
    volumes:
      - ipfs_data:/app/
    networks:
      - cc
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - s3
      - cache

  psql:
    image: postgres:10
    container_name: postgres
    environment:
      POSTGRES_DB: cc-portal
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - "psql-data:/var/lib/postgresql/data/"
    command: >
      bash -c '
      /usr/local/bin/docker-entrypoint.sh postgres & 
      pid=$!; 
      echo "Waiting for PostgreSQL to start..."; 
      while ! pg_isready -q -h postgres -p 5432; do 
        sleep 1; 
      done; 
      PGUSER=postgres PGPASSWORD=postgres psql -U postgres -d cc-portal -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"; 
      wait $pid
      '
    networks:
      - cc

  cache:
    image: redis/redis-stack:latest
    container_name: cache
    restart: always
    volumes:
      - cache:/data
    networks:
      - cc

  s3:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio
    command: ["server", "/data", "--console-address", ":9001"]
    volumes:
      - s3_data:/data
    networks:
      - cc

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:3000"
    networks:
      - cc

volumes:
  cache:
  s3_data:
  ipfs_data:
  psql-data:
networks:
  cc: